// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// QueueDao is the data access object for table queue.
type QueueDao struct {
	table   string       // table is the underlying table name of the DAO.
	group   string       // group is the database configuration group name of current DAO.
	columns QueueColumns // columns contains all the column names of Table for convenient usage.
}

// QueueColumns defines and stores column names for table queue.
type QueueColumns struct {
	Id              string //
	Hash            string //
	Symbol          string //
	ContractAddress string //
	From            string // 转出地址
	To              string // 转入地址
	Value           string // 金额
	GasLimit        string // gas 限制
	GasUsed         string // gas 实际消耗
	GasPrice        string // gas 价格
	Nonce           string //
	Type            string // 0转出手续费
	Status          string // 转账状态: -1转出失败,0等待转出,1转出中,2转出成功
	FailAmount      string // 失败次数
	PrivateKey      string // 私钥
	Additional      string // 附加数据,当该转账完成后,进行的操作
	CreateAt        string // 创建时间
	SendAt          string // 发送转账时间
	FinishAt        string // 转账检测成功时间
	UpdateAt        string // 更新时间
}

//  queueColumns holds the columns for table queue.
var queueColumns = QueueColumns{
	Id:              "id",
	Hash:            "hash",
	Symbol:          "symbol",
	ContractAddress: "contract_address",
	From:            "from",
	To:              "to",
	Value:           "value",
	GasLimit:        "gas_limit",
	GasUsed:         "gas_used",
	GasPrice:        "gas_price",
	Nonce:           "nonce",
	Type:            "type",
	Status:          "status",
	FailAmount:      "fail_amount",
	PrivateKey:      "private_key",
	Additional:      "additional",
	CreateAt:        "create_at",
	SendAt:          "send_at",
	FinishAt:        "finish_at",
	UpdateAt:        "update_at",
}

// NewQueueDao creates and returns a new DAO object for table data access.
func NewQueueDao() *QueueDao {
	return &QueueDao{
		group:   "default",
		table:   "queue",
		columns: queueColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *QueueDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *QueueDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *QueueDao) Columns() QueueColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *QueueDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *QueueDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *QueueDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
