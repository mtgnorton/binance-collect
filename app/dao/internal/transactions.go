// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// TransactionsDao is the data access object for table transactions.
type TransactionsDao struct {
	table   string              // table is the underlying table name of the DAO.
	group   string              // group is the database configuration group name of current DAO.
	columns TransactionsColumns // columns contains all the column names of Table for convenient usage.
}

// TransactionsColumns defines and stores column names for table transactions.
type TransactionsColumns struct {
	Id           string // ID
	Symbol       string //
	Hash         string // 交易hash
	Nonce        string // 交易nonce
	From         string // 转出地址
	To           string // 转入地址
	Value        string // 转账金额,单位为wei
	ValueDecimal string // 转账金额,小数
	GasLimit     string // gas 限制
	GasUsed      string // gas 实际消耗
	GasPrice     string // gas 价格
	BlockNumber  string // 块号
	BlockHash    string // 块hash
	Type         string // 转账类型
	CreateAt     string // 创建时间
	UpdateAt     string // 更新时间
}

//  transactionsColumns holds the columns for table transactions.
var transactionsColumns = TransactionsColumns{
	Id:           "id",
	Symbol:       "symbol",
	Hash:         "hash",
	Nonce:        "nonce",
	From:         "from",
	To:           "to",
	Value:        "value",
	ValueDecimal: "value_decimal",
	GasLimit:     "gas_limit",
	GasUsed:      "gas_used",
	GasPrice:     "gas_price",
	BlockNumber:  "block_number",
	BlockHash:    "block_hash",
	Type:         "type",
	CreateAt:     "create_at",
	UpdateAt:     "update_at",
}

// NewTransactionsDao creates and returns a new DAO object for table data access.
func NewTransactionsDao() *TransactionsDao {
	return &TransactionsDao{
		group:   "default",
		table:   "transactions",
		columns: transactionsColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *TransactionsDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *TransactionsDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *TransactionsDao) Columns() TransactionsColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *TransactionsDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *TransactionsDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *TransactionsDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
