// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// QueueTaskDao is the data access object for table queue_task.
type QueueTaskDao struct {
	table   string           // table is the underlying table name of the DAO.
	group   string           // group is the database configuration group name of current DAO.
	columns QueueTaskColumns // columns contains all the column names of Table for convenient usage.
}

// QueueTaskColumns defines and stores column names for table queue_task.
type QueueTaskColumns struct {
	Id              string //
	Hash            string //
	Symbol          string //
	ContractAddress string //
	From            string // 转出地址
	To              string // 转入地址
	Value           string // 金额
	GasLimit        string // gas  限制
	GasPrice        string // gas 预估 价格
	ActualGasUsed   string // gas 实际消耗
	ActualGasPrice  string // gas 实际价格
	ActualFee       string // 实际手续费
	Nonce           string //
	Type            string // 交易类型
	Status          string // 转账状态: fail 转出失败,wait 等待转出,process 转出中,success转出成功
	FailAmount      string // 失败次数
	PrivateKey      string // 私钥
	RelationId      string // 关联的其他表id
	CreateAt        string // 创建时间
	SendAt          string // 发送转账时间
	FinishAt        string // 转账检测成功时间
	UpdateAt        string // 更新时间
}

//  queueTaskColumns holds the columns for table queue_task.
var queueTaskColumns = QueueTaskColumns{
	Id:              "id",
	Hash:            "hash",
	Symbol:          "symbol",
	ContractAddress: "contract_address",
	From:            "from",
	To:              "to",
	Value:           "value",
	GasLimit:        "gas_limit",
	GasPrice:        "gas_price",
	ActualGasUsed:   "actual_gas_used",
	ActualGasPrice:  "actual_gas_price",
	ActualFee:       "actual_fee",
	Nonce:           "nonce",
	Type:            "type",
	Status:          "status",
	FailAmount:      "fail_amount",
	PrivateKey:      "private_key",
	RelationId:      "relation_id",
	CreateAt:        "create_at",
	SendAt:          "send_at",
	FinishAt:        "finish_at",
	UpdateAt:        "update_at",
}

// NewQueueTaskDao creates and returns a new DAO object for table data access.
func NewQueueTaskDao() *QueueTaskDao {
	return &QueueTaskDao{
		group:   "default",
		table:   "queue_task",
		columns: queueTaskColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *QueueTaskDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *QueueTaskDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *QueueTaskDao) Columns() QueueTaskColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *QueueTaskDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *QueueTaskDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *QueueTaskDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
