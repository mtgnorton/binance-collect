// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// ThanksOrShieldOrCollectContentRelationDao is the data access object for table forum_thanks_or_shield_or_collect_content_relation.
type ThanksOrShieldOrCollectContentRelationDao struct {
	table   string                                        // table is the underlying table name of the DAO.
	group   string                                        // group is the database configuration group name of current DAO.
	columns ThanksOrShieldOrCollectContentRelationColumns // columns contains all the column names of Table for convenient usage.
}

// ThanksOrShieldOrCollectContentRelationColumns defines and stores column names for table forum_thanks_or_shield_or_collect_content_relation.
type ThanksOrShieldOrCollectContentRelationColumns struct {
	Id             string //
	UserId         string // 用户id
	Username       string // 用户名
	TargetId       string // 被感谢｜屏蔽|收藏 主题id|回复id
	TargetUserId   string // 被感谢｜屏蔽|收藏 用户id
	TargetUsername string // 被感谢用户名
	Type           string // 类型 感谢主题: thanks_posts,感谢回复: thanks_reply,屏蔽主题: shield_posts,屏蔽回复: shield_reply,收藏主题:collect_posts
	CreatedAt      string // 创建时间
}

//  ThanksOrShieldOrCollectContentRelationColumns holds the columns for table forum_thanks_or_shield_or_collect_content_relation.
var thanksOrShieldOrCollectContentRelationColumns = ThanksOrShieldOrCollectContentRelationColumns{
	Id:             "id",
	UserId:         "user_id",
	Username:       "username",
	TargetId:       "target_id",
	TargetUserId:   "target_user_id",
	TargetUsername: "target_username",
	Type:           "type",
	CreatedAt:      "created_at",
}

// NewThanksOrShieldOrCollectContentRelationDao creates and returns a new DAO object for table data access.
func NewThanksOrShieldOrCollectContentRelationDao() *ThanksOrShieldOrCollectContentRelationDao {
	return &ThanksOrShieldOrCollectContentRelationDao{
		group:   "default",
		table:   "forum_thanks_or_shield_or_collect_content_relation",
		columns: thanksOrShieldOrCollectContentRelationColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *ThanksOrShieldOrCollectContentRelationDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *ThanksOrShieldOrCollectContentRelationDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *ThanksOrShieldOrCollectContentRelationDao) Columns() ThanksOrShieldOrCollectContentRelationColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *ThanksOrShieldOrCollectContentRelationDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ThanksOrShieldOrCollectContentRelationDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *ThanksOrShieldOrCollectContentRelationDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
