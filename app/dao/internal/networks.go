// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// NetworksDao is the data access object for table networks.
type NetworksDao struct {
	table   string          // table is the underlying table name of the DAO.
	group   string          // group is the database configuration group name of current DAO.
	columns NetworksColumns // columns contains all the column names of Table for convenient usage.
}

// NetworksColumns defines and stores column names for table networks.
type NetworksColumns struct {
	Id       string //
	Url      string // 请求地址
	Name     string // 网络名称
	ChainId  string //
	IsUse    string // 是否是正在使用的网络
	CreateAt string // 创建时间
	UpdateAt string // 更新时间
}

//  networksColumns holds the columns for table networks.
var networksColumns = NetworksColumns{
	Id:       "id",
	Url:      "url",
	Name:     "name",
	ChainId:  "chain_id",
	IsUse:    "is_use",
	CreateAt: "create_at",
	UpdateAt: "update_at",
}

// NewNetworksDao creates and returns a new DAO object for table data access.
func NewNetworksDao() *NetworksDao {
	return &NetworksDao{
		group:   "default",
		table:   "networks",
		columns: networksColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *NetworksDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *NetworksDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *NetworksDao) Columns() NetworksColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *NetworksDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *NetworksDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *NetworksDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
