// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// HealthRecordDao is the data access object for table health_record.
type HealthRecordDao struct {
	table   string              // table is the underlying table name of the DAO.
	group   string              // group is the database configuration group name of current DAO.
	columns HealthRecordColumns // columns contains all the column names of Table for convenient usage.
}

// HealthRecordColumns defines and stores column names for table health_record.
type HealthRecordColumns struct {
	Id             string //
	Day            string // 当前日期
	Breakfast      string // 早餐,json格式,{type:事务名称,is_later:是否晚点,has_meat:是否含肉}
	Launch         string // 早餐,json格式,{type:事务名称,is_later:是否晚点,has_meat:是否含肉}
	Dinner         string // 中餐,json格式,json格式,{type:事务名称,is_later:是否晚点,has_meat:是否含肉}
	Drink          string // 饮料,json格式,{coffee_americano:没事咖啡,coffee_latte:拿铁,drink_mix_sang:西洋参等,drink_cold:冷饮,additional:其他附加的饮料}
	Sleep          string // 睡眠,json格式,{start:开始时间,end:结束时间}
	Run            string // 运动,json格式,{time:运动时间,distance:运动距离,is_nausea:是否反胃}
	Stomach        string // 胃,json格式,{stomachache_level:疼痛级别(0正常，1隐痛，2轻微疼痛，3较重疼痛，4重度疼痛),is_nausea:非运动是否恶心}
	Tongue         string // 舌,json格式,{is_thick_ease:舌苔后是否缓解,is_dry:舌苔是否干燥}
	DefecateAmount string // 排便次数
	FartIsMuch     string // 放屁是否频繁
	HasNewAcne     string // 是否有新的痤疮
	CreatedAt      string // 创建时间
	UpdatedAt      string // 更新时间
}

//  healthRecordColumns holds the columns for table health_record.
var healthRecordColumns = HealthRecordColumns{
	Id:             "id",
	Day:            "day",
	Breakfast:      "breakfast",
	Launch:         "launch",
	Dinner:         "dinner",
	Drink:          "drink",
	Sleep:          "sleep",
	Run:            "run",
	Stomach:        "stomach",
	Tongue:         "tongue",
	DefecateAmount: "defecate_amount",
	FartIsMuch:     "fart_is_much",
	HasNewAcne:     "has_new_acne",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

// NewHealthRecordDao creates and returns a new DAO object for table data access.
func NewHealthRecordDao() *HealthRecordDao {
	return &HealthRecordDao{
		group:   "default",
		table:   "health_record",
		columns: healthRecordColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *HealthRecordDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *HealthRecordDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *HealthRecordDao) Columns() HealthRecordColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *HealthRecordDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *HealthRecordDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *HealthRecordDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
